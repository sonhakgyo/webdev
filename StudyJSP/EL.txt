${표현식} : EL(Expression Language, 표현 언어)
        · <% %>과 <%= %> 대신 EL, JSTL 사용을 권장
        · 자바는 자바대로, 웹은 웹으로 분리
        · 4가지 영역에 속하는 모든 Attribute 사용 가능
        · 수치 연산, 관계 연산, 논리 연산이 가능
        · 자바 클래스 메서드 호출 기능 제공
        · EL만의 기본 객체 제공(표기법: ${espr})
        
        · Java(Logic)                 ==> Servlet
        · Html, CSS, Javascript(View) ==> Jsp

EL 자료형
        1. Boolean
        2. 정수
        3. 실수
        4. 문자열
        5. null

EL 수치 연산자
        +, -, /(=div), %(=mod)
        객체가 null이면 0으로 처리된다.
        나눗셈의 결과는 double

EL 관계 연산자
        == 또는 eq
        != 또는 nu
        <  또는 lt
        >  또는 gt
        <= 또는 le
        >= 또는 ge

 
<애트리뷰트>
        1. ${영역명.속성명}
                PAGE 영역의 속성 : ${pageScope.속성명}
                REQUEST 영역의 속성 : ${requestScope.속성명}
                SESSION 영역의 속성 : ${sessionScope.속성명}
                APPLICATION 영역의 속성 : ${applcationScope.속성명}

        2. ${속성명}
                네 개의 영역을 차례대로 검색해서 애트리뷰트가 존재하는지 확인한다.
                page < request < session < application
                최종적으로 없으면 아무것도 표현하지 않는다.

<파라미터>
        1. ${param.파라미터명} == request.getParameter(" ");
                알아서 자료형을 처리하기 때문에 사용이 편리하다.
                parsing 작업이 필요 없다.


EL 내장객체 
        1. pageContext : JSP의 page 객체
        2. pageScope : pageContext 객체에 저장된 속성
        3. requestScope : request 객체에 저장된 속성
        4. sessionScope : session 객체에 저장된 속성
        5. applicationScope : application 객체에 저장된 속성
        6. param : request 객체에 저장된 파라미터명
        7. paramValues : 1개의 파라미터에 값이 여러개 있을 경우 사용
        8. header : request.getHeader(헤더명)과 동일하다.
        9. headerValues : 1개의 헤더에 값이 여러개 있을 경우 사용
        10. cookie : 클라이언트 브라우저에 저장된 쿠키
        11. initParam : application.getInitParameter(이름)의 결과와 동일 