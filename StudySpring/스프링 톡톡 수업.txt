main2()에서 main()으로 어떻게 변환되는지 이해하자. 스프링에 대한 이해다.

ApplcationContext context = new ClassPathXmlApplicationContext("beans.xml"); 에서 beans.xml은 xml 파일을 가리킨다.
getBean("helloWorld")는 xml에서 bean id="helloWorld"다.


IoC, Inversion of Control
	제어의 역전 : 프로그램의 제어 흐름 구조가 개발자에서 스프링으로 역전되었다.
	이전에는 개발자가 프로그램의 흐름을 제어했지만 스프링은 프로그램의 흐름을 프레임워크가 주도하게 된다.
		객체의 생성, 생명주기 관리를 컨테이너가 담당한다.
	Spring IoC Container가 설정 정보(configuration metadata)를 필요로 한다.
	설정 정보는 Container가 객체를 생성하고, 객체 간의 종속성을 이어줄 수 있도록 필요한 정보를 제공한다.

DI, Dependency Injection
	의존성 주입 : IoC를 구현하는 디자인 패턴
	구성요소 간의 종속성을 소스 코드에서 설정하지 않고 외부의 설정 파일 등을 통해 주입하도록 하는 디자인 패턴
	장점
		종속성의 설정을 컴파일 시에서 런타임 시로 조정, 모듈 간의 결합도 낮춤
		코드 재사용 촉진, 작성된 모듈을 여러 곳에서 소스코드 수정없이 사용 가능
		단위테스트 편의성 증대

AOP, Aspect Oriented Programming
	관점지향 프로그래밍
	Aspect : 어플리케이션의 핵심 기능은 아니지만 어플리케이션을 구성하는 중요한 요소이고, 부가적인 기능을 담당하는 요소
	어플리케이션의 핵심적인 기능에서 부가적인 기능을 분리해서 Aspect 모듈로 만들어서 설계하고 개발하는 방법
	OOP(객체지향 프로그래밍)을 돕는 보조적인 기술로 OOP 모듈화의 핵심은 클래스지만 AOP 모듈화의 핵심은 관점

용어 
	Advice : 부가기능을 담당하는 역할, 로깅을 담당할 클래스 & 부가기능을 담은 모듈로 공통 로직을 담고 있는 코드
	Joinpoint : Advice 적용 가능한 지점, Spring AOP에서는 각 객체의 메서드
	Pointcut : Joinpoint를 선별하는 기능을 정의한 모듈
	Target : 실제 비즈니스 로직을 처리하는 클래스 & 대상 메서드를 가지는 객체
	Proxy : Advice가 적용되었을 때 만들어지는 객체
	Weaving : Advice를 핵심 로직 코드에 적용하는 것

Advice 동작 시점
	Before : 메서드 실행 전 동작
	After 
	After Returning : 메서드가 성공적으로 리턴되면 동작
	After Throwing : 메서드 실행 중 예외가 발생하면 동작
	After : 메서드 실행 후 동작 & try catch문의 finally와 같은 역할
	Around : 메서드 실행 전, 후에 처리할 로직을 삽입하여 동작

포인트컷(Pointcut) 표현식
	execution(* t_tok03.ItemTarget.*( ))
		* : 리턴타입
		t_tok03 : 패키지 경로
		ItemTarget : 클래스명. *Target, *Impl처럼 *키워드 사용 가능
		*( ) : 모든 메서드
			get*( ) : get으로 시작하는 모든 메서드
			set*( ) : set으로 시작하는 모든 메서드 

라이프 사이클, Life Cycle
	생명주기, 생애주기, 시작부터 끝까지
	스프링 컨테이너의 생명주기
		생성 -> 설정 -> 사용 -> 종료

Bean Life Cylce 관리 방법
	01. 인터페이스 구현
	02. Bean 정의 시 메서드 지정
	03. 어노테이션 지정             <-- 다른 프레임워크에서 똑같이 사용 가능하다. 스프링 종속이 아니다.
	# 어플리케이션 설계와 프로젝트 특성에 맞게 위 세가지 중 하나의 방법을 사용하면 된다.
	# 실행순서
		어노테이션 지정 방식 -> 인터페이스 구현 방식 -> Bean 정의 시 메서드 지정 방식


9강 웹 개발 모델
		✔Model1 구조
		✔Model2 구조
		✔MVC(Model-View-Controller) 구조
		# 모델1과 2의 모델과 MVC의 모델은 다르다.
	
	모델1 구조
		- JSP에서 비즈니스 로직, View 모두 처리
		- 구조가 단순하여 익히기 쉬움
		- 구현이 익숙하고, 작은 단위의 어플리케이션에 적합
		- 출력을 위한 뷰와 로직 처리를 위한 자바 코드가 섞여있기 때문에 JSP 코드의 복잡성 증가
		- 업무 분업이 어려움

	모델2 구조
		- JSP에서 모든 것을 담당하던 모델1 방식과 달리 뷰를 담당하는 JSP페이지와 로직을 위한 서블릿 클래스로 나누어 브라우저의 요청을 처리함
		- 요청이 들어오면 로직 처리는 모델이 담당하고 요청 결과를 보여주는 뷰는 JSP가 담당하고 이를 위한 흐름 제어를 컨트롤러인 서블릿이 담당하는 구조
		- 출력을 위한 뷰와 로직을 위한 자바 코드가 분리되어 JSP 코드가 복잡하지 않음
		- 뷰, 로직 처리에 대한 분업이 좋고 유지보수성이 좋음
		- 모델1에 비하여 설계가 어려움
	
	#MVC 패턴을 웹 개발에 도입한 구조를 Model2라고 함
	M-V-C 구조
		- SW 공학에서 사용되는 디자인 패턴
		- 어플리케이션의 역할을 모델, 뷰, 컨트롤러로 구분
			✔모델 : 정보(데이터), 서비스 클래스, 자바 빈으로 비즈니스 로직을 처리하는 모든 것들
			✔뷰 : 텍스트, 체크박스 등과 같은 사용자 인터페이스, JSP와 같은 클라이언트에 출력되는 장면
			✔컨트롤러 : 데이터와 비즈니스 로직 사이의 상호동작, MVC 패턴의 모든 흐름 제어 담당

12강 스프링 응용
Spring MVC 구현 방식
	- 다양한 구현 방식이 존재
	- 사용 방법을 외우는 것보다 "전체적인 구조를 익히는 것"이 좋음
				
13강 스프링 컨트롤러
	컨트롤러 구현 및 설정
		- @Controller 어노테이션을 클래스에 적용
		- @RequestMapping 어노테이션을 이용해서 클라이언트의 요청을 처리할 메서드 지정
			GET, POST와 같은 HttpMethod 지정 가능
		- ModelAndView는 컨트롤러의 처리 결과를 보여줄 뷰와 뷰에서 출력할 모델 지정
		- ViewResolver에서 지정된 prefix와 suffic를 조합하여 View를 지정

	리턴타입 
		✔String : View의 이름을 지정하여 리턴
		✔ModelAndView : View와 Model을 같이 담아서 리턴
		✔void : 요청받는 URL을 기반으로 View가 지정됨
		✔Model Object : POJO 클래스를 기반으로 View가 지정됨

14강 JDBC와 Spring DAO
	JDBC(Java Database Connectivity)
		- JDBC는 DB에 접근할 수 있도록 Java에서 제공하는 API로 Java에서 사용되는 모든 Data Access 기반 기술
	문제점	- 쿼리 자체보다 실행 전과 후로 많은 코드가 필요
		- DB 연결을 열고 닫고, 예외를 처리하는 등의 코드를 작성하는 것은 번거로움

	Spring JDBC
		- DB 연결을 열고, 준비 및 시작하는 모든 저수준의 세부사항을 담당
			SQL문 실행, 예외 처리, 트랜잭션 처리, 연결 닫기
		- JDBC Template은 Spring JDBC 접근 방법 중 하나로 Spring에서 제공하는 클래스
		- Spring 설정 파일에 DataSource를 설정하고 공유된 DataSource Bean을 DAO 클래스에 의존성 주입하여 사용

	DAO(Dao Access Object)
		- DB 상호 작용에 일반적으로 사용되는 데이터 액세스 객체 == 실제로 DB에 접근하는 객체
		- DAO는 개발자가 담당하는 부분으로 필요한 CRUD를 SQL을 사용하여 코딩
		- Spring의 DAO를 통하여 JDBC, Hibernate, JPA, JDO, MyBatis와 같은 데이터 액세스 기술을 일관된 방식으로 쉽게 사용 가능 

15강 Spring Transaction과 logging
	로그(Log, 감사증적)
		- 기록을 남기는 것
		- Application 실행 중에 발생하는 이벤트나 각기 다른 사용자의 SW 간의 메세지를 기록한 파일
		- 프로그램 개발이나 운영 시 발생하는 문제점을 추적하거나 운영 상태를 모니터링하는 정보를 기록하는 것
		- 이러한 로그(Log)를 기록하는 행위를 Logging(로깅)이라고 함

	로그 레벨 6단계
		✔ FATAL : 아주 심각한 에러
		✔ ERROR : 요청을 처리하는 중 문제가 발생한 경우
		✔ WARN : 어플리케이션 실행에는 문제가 없지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지
		✔ INFO : 상태 변경과 같은 정보성 메세지
		✔ DEBUG : 개발 시 디버그 용도로 사용하는 메세지
		✔ TRACE : DEBUG보다 상세한 정보

	트랜잭션
		DBMS에서 수행하는 작업 단위
		ACID
			- 원자성(Atomicity) : 한 트랜잭션 내에서 실행한 작업들은 하나로 간주
			- 일관성(Consistency) : 트랜잭션은 일관성 있는 DB 상태를 유지
			- 격리성(Isolation) : 동시에 실행되는 트랜잭션들이 서로 영향을 미치지 않도록 격리해야 함
			- 지속성(Durability) : 트랜잭션을 성공적으로 마치면 결과가 항상 저장되어야 함

16강 Spring View - JSP
	View
		- Controller의 처리결과 화면
		- Model Data의 렌더링을 담당, HTML을 생성
		- Template Engine을 이용하여 화면을 생성
			JSP는 Template Engine의 일종

	JSP
		- Java 언어를 사용하여 웹 페이지를 구현 가능하게 하는 방식
		- HTML 코드에 Java 코드를 넣어 동적인 웹 페이지를 생성하는 기술
		
17강 웹 서비스 구현
	웹 서비스
		- 네트워크 상에서 서로 다른 종류의 컴퓨터들 간에 상호작용을 하기 위한 소프트웨어 시스템
		- 웹을 통해 서비스를 제공하는 것
		- 학생 관리 서비스 == CRUD
			✔등록 
			✔조회
			✔수정
			✔삭제

	++ 이 강의에서 메서드, 컨트롤러에 ".do"가 붙지않은 경우 ".do" 추가
	++ commandName(4버젼)과 modelAttribute(5버젼) 참고 블로그 : https://offbyone.tistory.com/325

18강 MyBatis 기본
	MyBatis
		- 자바 퍼시스턴스 프레임워크(Java Persistence Framework)의 일종
			데이터의 저장, 조회, 변경, 삭제를 다루는 클래스 및 설정 파일의 집합
			퍼시스턴스 프레임워크를 사용하면 JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 DB와 연동되는 시스템을 빠르게 개발 가능
		- Apache License 2.0으로 배포되는 자유 소프트웨어
		- MyBatis는 iBatis 3.0의 포크(fork)
	* 참고로 MariaDB와 MySQL은 형제격 -- 참고 블로그 : https://gywn.net/2012/06/let-me-introduce-mariadb/

	XML과 Annotation 사용법
		✔XML : 복잡한 구분에 효과적, 많은 조건문, 조인문 등이 포함된 SQL문
		✔Annotation : 간단한 구문에서 효과적

	TransactionManager 타입
		- JDBC : JDBC 커밋과 롤백을 처리하기 위해 사용, DataSource로부터 커넥션을 가져옴
		- MANAGED : 어떤 것도 하지 않음. 커밋, 롤백 등의 작업을 컨테이너가 관리하도록 위임함
	DataSource 타입
		- UNPOOLED : 매번 요청에 대해 커넥션을 열고 닫는 간단한 DataSource
		- POOLED : 새로운 커넥션 요청 시마다 초기화하지 않음. 커넥션 풀이 적용

19강 MyBatis API 및 Spring 연동
	MyBatis - Spring
		- MyBatis와 Spring 연동을 위한 모듈
		- Spring의 개발 완료가 MyBatis보다 먼저 완료되어 Spring과 MyBatis의 연동을 위한 MyBatis의 하위 프로젝트

	연동을 위한 API
		✔SqlSessionFactoryBean
		✔SqlSessionTemplate

	SqlSession
		selectOne() : 하나의 데이터를 검색, 두 개 이상 리턴되면 예외 발생
		selectList() : 여러 개의 데이터를 검색
		insert() : 몇 건 삽입했는지 리턴
		update() : 몇 건 갱신했는지 리턴
		delete() : 몇 건 삭제했는지 리턴
		
20강 MyBatis를 활용한 개발
	기초 완강!